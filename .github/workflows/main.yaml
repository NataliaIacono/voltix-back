name: Build and Deploy

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose the environment to deploy'
        required: true
        default: 'develop'
        type: choice
        options:
          - develop
          - devops-workflow
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-common-cache
          cache-to: type=inline
          build-args: |
            ENV=production
          tags: |
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.sha }}

  deploy:
    needs: build-and-test
    runs-on:  [self-hosted]
    env:
      DB_HOST: '${{ secrets.DB_HOST }}'
      DB_PORT: '${{ secrets.DB_PORT }}'
      DB_NAME: '${{ secrets.DB_NAME }}'
      DB_USER: '${{ secrets.DB_USER }}'
      DATABASE_PASSWORD: '${{ secrets.DATABASE_PASSWORD }}'
      SECRET_KEY: '${{ secrets.SECRET_KEY }}'
      DJ_USERNAME: '${{ secrets.DJ_USERNAME }}'
      DJ_PASSWORD: '${{ secrets.DJ_PASSWORD }}'
      DJ_EMAIL: '${{ secrets.DJ_EMAIL }}'
      DNI: '${{ secrets.DNI }}'
      CORS_ALLOW_ALL_ORIGINS: '${{ secrets.CORS_ALLOW_ALL_ORIGINS }}'
      CSRF_TRUSTED_ORIGINS: '${{ secrets.CSRF_TRUSTED_ORIGINS }}'
      USE_DRF_SETTINGS: '${{ secrets.USE_DRF_SETTINGS }}'
      DEBUG: '${{ secrets.DEBUG }}'
      CELERY_BROKER_URL: '${{ secrets.CELERY_BROKER_URL }}'
      CELERY_RESULT_BACKEND: '${{ secrets.CELERY_RESULT_BACKEND }}'
      CLOUDINARY_CLOUD_NAME: '${{ secrets.CLOUDINARY_CLOUD_NAME }}'
      CLOUDINARY_API_KEY: '${{ secrets.CLOUDINARY_API_KEY }}'
      CLOUDINARY_API_SECRET: '${{ secrets.CLOUDINARY_API_SECRET }}'
      BACKEND_URL: '${{ secrets.BACKEND_URL }}'      


    steps:

      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Delete Previous 
        run: |
          docker-compose -f docker-compose.prod.yaml stop voltix-back && docker-compose -f docker-compose.prod.yaml rm voltix-back

      - name: Pull and Deploy
        run: |
          docker-compose -f docker-compose.prod.yaml pull && docker-compose -f docker-compose.prod.yaml up -d   

      - name: Remove old Images
        run: |
          images=$(docker images -f dangling=true -q)
          if [ -n "$images" ]; then
              docker rmi $images
          else
              echo "No dangling images to remove."
          fi
      
      - name: Post Deploy Tasks
        run: |
          docker-compose -f docker-compose.prod.yaml exec -it voltix-back python3 manage.py collectstatic --noinput
          docker-compose -f docker-compose.prod.yaml exec -it voltix-back python3 manage.py makemigrations
          docker-compose -f docker-compose.prod.yaml exec -it voltix-back python3 manage.py migrate